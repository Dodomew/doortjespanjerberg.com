// Small tablets (portrait view)
$screen-t-min: 768px;

// Tablets and small desktops
$screen-ds-min: 1024px;

// Large tablets and desktops
$screen-dl-min: 1280px;

// Medium devices
@mixin tablet {
    @media (min-width: #{$screen-t-min}) {
        @content;
    }
}

// Large devices
@mixin desktop-small {
    @media (min-width: #{$screen-ds-min}) {
        @content;
    }
}

// Extra large devices
@mixin desktop-large {
    @media (min-width: #{$screen-dl-min}) {
        @content;
    }
}

@mixin screenreader {
    position: absolute;
    overflow: hidden;
    height: 1px;
    width: 1px;
    clip: rect(1px, 1px, 1px, 1px);
}

.screenreader {
    @include screenreader;
}

/*
    Mixin: Fluid Type
    Magic calc + vh to allow text to be fluid between minimum
    and maximum breakpoints.

    @group typography
    @param {variable} $min-font-size [12px] - Minimum font size
    @param {variable} $max-font-size [24px] - Maximum font size
    @param {variable} $lower-range [420px] - Stop scaling font smaller at this screen resolution
    @param {variable} $upper-range [900px] - Stop scaling font larger at this screen resolution

    @example
    h1 {
        @include responsiveSize("font-size", 30px, 60px, 300px, 768px);
        @include responsiveSizeWithCSSFunction("transform", "translateX", 0px, 100px, 300px, 768px);
    }

    @site https://madebymike.com.au/writing/precise-control-responsive-typography/

    This is called a LERP, linear interpolation
    lerp(a, b, x) = a + (b -a ) * x

    The reason some values get * 0 + 1, is I think to convert the value from px to non-px, e.g. 30px to 30
    Calc cant calculate 30px + 30px, doesnt know how to work with px. It must be something like 30px + 30

    You can use this mixin for things like font-size, line-height, margins, paddings etc
    This is not animating, its calculating, therefor its impact on performance is minimal!
*/

// Default . Use for things like font-size, line-height, margins etc
@mixin responsiveSize(
    $cssProperty,
    // default values, override where needed
    $min-font-size: 16px,
    $max-font-size: 20px,
    $lower-range: 320px,
    $upper-range: 1440px
) {
    @include responsiveSizeWithCSSFunction(
        $cssProperty,
        null,
        $min-font-size,
        $max-font-size,
        $lower-range,
        $upper-range
    );
}

// Special usage for css props which have functions, like transform: translate()
@mixin responsiveSizeWithCSSFunction(
    $cssProperty,
    $withCSSFunction: null,
    $min-font-size: 16px,
    $max-font-size: 20px,
    $lower-range: 320px,
    $upper-range: 1440px
) {
    $lerp: calc(
        #{$min-font-size} + #{(
                ($max-font-size / ($max-font-size * 0 + 1)) - ($min-font-size / ($min-font-size * 0 + 1))
            )} * ((100vw - #{$lower-range}) / #{(
                        ($upper-range / ($upper-range * 0 + 1)) - ($lower-range / ($lower-range * 0 + 1))
                    )})
    );

    @if ($withCSSFunction != null) {
        #{$cssProperty}: #{"#{$withCSSFunction}(#{$lerp})"};
    } @else {
        #{$cssProperty}: $lerp;
    }

    @media screen and (max-width: $lower-range) {
        @if ($withCSSFunction != null) {
            #{$cssProperty}: #{"#{$withCSSFunction}(#{$min-font-size})"};
        } @else {
            #{$cssProperty}: $min-font-size;
        }
    }

    @media screen and (min-width: $upper-range) {
        @if ($withCSSFunction != null) {
            #{$cssProperty}: #{"#{$withCSSFunction}(#{$max-font-size})"};
        } @else {
            #{$cssProperty}: $max-font-size;
        }
    }
}

/*
    CSS rainbow bg pattern from : https://codepen.io/lunamatic/pen/MBaXwB
*/

@mixin rainbowWaves($posX, $posY) {
    background-image: repeating-radial-gradient(
        circle at $posX $posY,
        var(--trans),
        var(--trans) 0.2em,
        var(--wave6) 0.21em,
        var(--wave6) 0.24em,
        var(--wave5) 0.25em,
        var(--wave5) 0.3em,
        var(--wave4) 0.31em,
        var(--wave4) 0.35em,
        var(--wave3) 0.36em,
        var(--wave3) 0.4em,
        var(--wave2) 0.41em,
        var(--wave2) 0.45em,
        var(--wave1) 0.46em,
        var(--wave1) 0.5em,
        var(--trans) 0.51em,
        var(--trans) 2em
    );
}

/*
    https://codepen.io/_twosmalltrees/pen/EORRby
*/
@mixin vintageTextShadow($col1, $col2) {
    text-shadow: 0.5px 0.5px $col1, 1px 1px $col1, 2px 2px $col1, 2.5px 2.5px $col2, 3px 3px $col2, 3.5px 3.5px $col2,
        4px 4px $col2, 4.5px 4.5px $col2, 5px 5px $col2, 5.5px 5.5px $col2, 6px 6px $col2, 6.5px 6.5px $col2,
        7px 7px $col2, 7.5px 7.5px $col2;
}

// https://www.petercarrero.com/examples/stroke/
@mixin doubleStrokeFont($col1, $col2, $size1, $size2) {
    background: transparent;
    z-index: 0;
    color: #fff;

    &::before,
    &::after {
        content: attr(data-text);
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
    }

    &::before {
        -webkit-text-stroke: $size1 $col1;
        z-index: -1;
    }

    &::after {
        -webkit-text-stroke: $size2 $col2;
        z-index: -2;
    }
}
